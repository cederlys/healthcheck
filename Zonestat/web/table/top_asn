        <table>
            <tr>
                <th>ASN</th>
% foreach my $n (@ds) {
                    <th><% $n->domainset->name %><br> <% $n->name %></th>
% }
                </tr>
% for my $k (@ordered) {
                <tr class="<% ++$c%2==0?'even':'odd' %>">
                    <td>
% if (defined($k) and $k) {
                        AS<% $k %> (<% $names{$k} %>)
% } else {
                        No information.
% }
                    </td>
% foreach my $n (@ds) {
                    <td class="numeric"><% $data{$k}{$n->id} %></td>
% }

                </tr>
% }
            <tr>
                <th colspan="<% 1+@ds %>"><a href="/csv/top_asn?ipv6=<% $ipv6 %>&<% $sidstring %>">CSV file</a></th>
            </tr>
        </table>
        
<%init>
my $ws;
my $asn = $zs->present->dbx('Asdata');
my @ds = map {$zs->present->dbx('Testrun')->find($_)} @sid;
$m->abort(404) unless @ds;

my %data = $zs->present->nameservers_per_asn($ipv6, @ds);
my %names;

foreach my $a (keys %data) {
    my $r = $asn->search({asn => $a});
    if (defined($r) and defined($r->first)) {
        $names{$a} = $r->first->asname;
    } else {
        $names{$a} = 'No name'
    }
}

my @ordered = sort {$data{$b}{$ds[0]->id} <=> $data{$a}{$ds[0]->id}} keys %data;
splice @ordered, 20;

my $sidstring = '&';
$sidstring .= join('&', map {"sid=$_"} @sid);
my $c;
</%init>
<%args>
@sid
$ipv6 => 0
</%args>